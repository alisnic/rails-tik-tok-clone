<style>

.glyphicon {
  font-size: 75px;
  color: white;
 }

.glyphicon-record {
  color: red;
}

.glyphicon-remove {
  font-size: 40px;
  text-align: center;
  top: 50%;
}
</style>

<div class="app__videos">
  <div class="video">
    <video id="capture" class="video__player" autoplay muted></video>
  </div>

  <div class="video" style="display:none">
    <video id="recording" class="video__player" autoplay loop></video>
  </div>
</div>

<a style="position: absolute; bottom: 5px; left: 40%" id="startButton">
	<span id="icon" class="glyphicon glyphicon-record"></span>
</a>

<a href="/" style="position: absolute; bottom: 25px; right: 50px" id="removeButton">
	<span class="glyphicon glyphicon-remove"></span>
</a>

<%= form_for(Post.new, multipart: true, html: {style: "display:none" }) do |form| %>
  <%= form.file_field :video  %>
  <%= form.submit 'upload' %>
<% end %>

<script>
let preview = document.getElementById("capture");

navigator.mediaDevices.getUserMedia({
	video: true,
	audio: true
}).then(stream => {
	preview.srcObject = stream;
	preview.captureStream = preview.captureStream || preview.mozCaptureStream;
  setState(State.READY)
})

let currentState = null
let State = {
	"READY": 1,
	"RECORDING": 2,
	"STOPPED": 3,
	"FINISHED": 4
}

function setState(state, data) {
	currentState = state

	let icon = document.getElementById('icon')

	switch(state) {
		case State.RECORDING:
			icon.removeAttribute("class")
			icon.setAttribute("class", 'glyphicon glyphicon-stop')
			break;

  case State.FINISHED:
    icon.removeAttribute("class")
    icon.setAttribute("class", 'glyphicon glyphicon-upload')

    preview.parentElement.style.display = "none"
    recording.parentElement.style.display = "block"
    recording.src = URL.createObjectURL(data);

    attachVideoToForm(data)
    break;
	}
}

function attachVideoToForm(recordedBlob) {
	let file = new File([recordedBlob], "video.webm", { type: "video/webm", lastModified:new Date().getTime()});
	let container = new DataTransfer();
	container.items.add(file);
	let input = document.getElementById('post_video')
	input.files = container.files
}

function startRecording() {
	let recorder = new MediaRecorder(preview.captureStream());
	let data = [];

	recorder.ondataavailable = event => data.push(event.data);
	recorder.start();
	setState(State.RECORDING)

	recorder.onstop = (event)=> {
		let recordedBlob = new Blob(data, { type: "video/webm" });
		setState(State.FINISHED, recordedBlob)
	};
}

let recording = document.getElementById("recording");

startButton.addEventListener("click", function() {
	switch(currentState) {
		case State.READY:
			startRecording()
			break
    case State.RECORDING:
      preview.srcObject.getTracks().forEach(track => track.stop());
      break
    case State.FINISHED:
      document.forms["new_post"].submit()
      break
		default:
			alert(currentState)
			break;
	}
}, false)

</script>
